{
  "address": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_accountReceiveTicketPrice",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_accountReceiveStaking",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "idDao",
          "type": "uint256"
        }
      ],
      "name": "JoinDao",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timeJoinDao",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "idDao",
          "type": "uint256"
        }
      ],
      "name": "LeaveDao",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "accountReceiveStaking",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "accountReceiveTicketPrice",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getInfoMemberById",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "daoId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "addressUser",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountStaking",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timeJoinDao",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timeLeaveDao",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "status",
              "type": "string"
            }
          ],
          "internalType": "struct AihomeDaoStaking.ProfileMember",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "isExistName",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isMemberDao",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        }
      ],
      "name": "joinDao",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "leaveDao",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "profileDaoById",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalMember",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalStake",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "profileMemberDao",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "daoId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "addressUser",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountStaking",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timeJoinDao",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timeLeaveDao",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "status",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x04dcc16fb553c593ec5f92dd0197e061dc9c49f0890ff7fb38f1c67f862ae643",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
    "transactionIndex": 0,
    "gasUsed": "1439802",
    "logsBloom": "0x
    "blockHash": "0xa95895c650708ca906817f9be90368714212dade0ff47b3c3636af6708eccd7b",
    "transactionHash": "0x04dcc16fb553c593ec5f92dd0197e061dc9c49f0890ff7fb38f1c67f862ae643",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 4,
        "transactionHash": "0x04dcc16fb553c593ec5f92dd0197e061dc9c49f0890ff7fb38f1c67f862ae643",
        "address": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xa95895c650708ca906817f9be90368714212dade0ff47b3c3636af6708eccd7b"
      }
    ],
    "blockNumber": 4,
    "cumulativeGasUsed": "1439802",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266"
  ],
  "numDeployments": 1,
  "solcInputHash": "ab48f6a82c4b59fb03a158e58ce05cb4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_accountReceiveTicketPrice\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_accountReceiveStaking\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"idDao\",\"type\":\"uint256\"}],\"name\":\"JoinDao\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timeJoinDao\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"idDao\",\"type\":\"uint256\"}],\"name\":\"LeaveDao\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"accountReceiveStaking\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accountReceiveTicketPrice\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getInfoMemberById\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"daoId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"addressUser\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountStaking\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeJoinDao\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeLeaveDao\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"status\",\"type\":\"string\"}],\"internalType\":\"struct AihomeDaoStaking.ProfileMember\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"isExistName\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isMemberDao\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"joinDao\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"leaveDao\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"profileDaoById\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalMember\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStake\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"profileMemberDao\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"daoId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"addressUser\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountStaking\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeJoinDao\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeLeaveDao\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"status\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/AihomeDaoStaking.sol\":\"AihomeDaoStaking\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/AihomeDaoStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\npragma solidity ^0.8.9;\\n\\ninterface IAIHomesDao {\\n    function profilesLength() external returns (uint256 length);\\n    function isOwnDao(address by) external returns (bool);\\n    function profilesById(\\n        uint256 _id\\n    )\\n        external\\n        returns (uint256 id, string memory name, address owner, uint256 option);\\n}\\n\\ncontract AihomeDaoStaking is Pausable, Ownable {\\n    //NOTE: testnet\\n    // address constant HOMES = 0x8402c360a9C1C9214D870c00835450899bC4F318;\\n    // address constant AIHomesDao = 0xf355A894C449D81570E5C4B7da43Ca266987808c;\\n\\n    //NOTE: local\\n    address constant HOMES = 0x5FbDB2315678afecb367f032d93F642f64180aa3;\\n    address constant AIHomesDao = 0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9;\\n\\n    address public accountReceiveTicketPrice;\\n    address public accountReceiveStaking;\\n\\n    struct ProfileDao {\\n        uint256 totalMember;\\n        uint256 totalStake;\\n    }\\n\\n    struct ProfileMember {\\n        uint256 id;\\n        string name;\\n        uint256 daoId;\\n        address addressUser;\\n        uint256 amountStaking;\\n        uint256 timeJoinDao;\\n        uint256 timeLeaveDao;\\n        string status;\\n    }\\n\\n    mapping(address => ProfileMember) public profileMemberDao;\\n    mapping(address => bool) public isMemberDao;\\n    mapping(uint256 => ProfileDao) public profileDaoById;\\n    mapping(uint256 => mapping(uint256 => address)) private getAddressDaoById;\\n    mapping(string => bool) public isExistName;\\n\\n    event JoinDao(address by,string name, uint256 timestamp, uint256 amount, uint256 idDao);\\n    event LeaveDao(address by, uint256 timeJoinDao, uint256 idDao);\\n\\n    constructor(\\n        address _accountReceiveTicketPrice,\\n        address _accountReceiveStaking\\n    ) {\\n        accountReceiveTicketPrice = _accountReceiveTicketPrice;\\n        accountReceiveStaking = _accountReceiveStaking;\\n    }\\n\\n    function pause() public onlyOwner {\\n        _pause();\\n    }\\n\\n    function unpause() public onlyOwner {\\n        _unpause();\\n    }\\n\\n    function joinDao(uint256 _id, string memory _name) public whenNotPaused {\\n        ProfileMember memory info;\\n        require(isMemberDao[msg.sender] == false, \\\"you are a member of dao\\\");\\n        require(IAIHomesDao(AIHomesDao).isOwnDao(msg.sender)==false, 'you are owner dao');\\n        require(isExistName[_name] == false, \\\"Name already exist\\\");\\n\\n        require(\\n            _id <= IAIHomesDao(AIHomesDao).profilesLength(),\\n            \\\"dao id does not exist\\\"\\n        );\\n        (, , , uint256 _option) = IAIHomesDao(AIHomesDao).profilesById(_id);\\n\\n        uint256 priceStake;\\n\\n        if (_option == 1) {\\n            priceStake = 40 ether;\\n        } else if (_option == 2) {\\n            priceStake = 60 ether;\\n        } else {\\n            priceStake = 100 ether;\\n        }\\n        require(\\n            IERC20(HOMES).balanceOf(msg.sender) >= priceStake,\\n            \\\"not enough money to trade\\\"\\n        );\\n        require(\\n            block.timestamp >\\n                profileMemberDao[msg.sender].timeLeaveDao + 30 days,\\n            \\\"not enough time\\\"\\n        );\\n\\n        IERC20(HOMES).transferFrom(\\n            msg.sender,\\n            accountReceiveTicketPrice,\\n            priceStake\\n        );\\n\\n        profileDaoById[_id].totalStake += priceStake;\\n\\n        info.addressUser = msg.sender;\\n        info.daoId = _id;\\n        info.name = _name;\\n        info.amountStaking = priceStake;\\n        info.timeJoinDao = block.timestamp;\\n        info.status = \\\"active\\\";\\n        isMemberDao[msg.sender] = true;\\n        profileDaoById[_id].totalMember++;\\n        info.id = profileDaoById[_id].totalMember;\\n\\n        profileMemberDao[msg.sender] = info;\\n        getAddressDaoById[_id][info.id] = msg.sender;\\n\\n        isExistName[_name] = true;\\n        emit JoinDao(msg.sender, _name, block.timestamp, priceStake, _id);\\n    }\\n\\n    function leaveDao() public whenNotPaused {\\n        ProfileMember storage info = profileMemberDao[msg.sender];\\n        require(isMemberDao[msg.sender] == true, \\\"you are not a member of dao\\\");\\n\\n        IERC20(HOMES).transferFrom(\\n            accountReceiveTicketPrice,\\n            msg.sender,\\n            profileMemberDao[msg.sender].amountStaking\\n        );\\n\\n        profileDaoById[profileMemberDao[msg.sender].daoId]\\n            .totalStake -= profileMemberDao[msg.sender].amountStaking;\\n\\n        isMemberDao[msg.sender] = false;\\n        info.status = \\\"inActive\\\";\\n        info.timeLeaveDao = block.timestamp;\\n\\n        isExistName[profileMemberDao[msg.sender].name] = false;\\n        emit LeaveDao(msg.sender, block.timestamp, info.timeLeaveDao);\\n    }\\n\\n    function getInfoMemberById(\\n        uint256 _id,\\n        uint256 _index\\n    ) public view returns (ProfileMember memory) {\\n        address add = getAddressDaoById[_id][_index];\\n        ProfileMember memory member = profileMemberDao[add];\\n        return member;\\n    }\\n}\\n\",\"keccak256\":\"0x4e45f9944f5ff042070dd3dfa8c6f2b09ce2e1c471d73c83141cdc4d12c6c877\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620018f9380380620018f98339810160408190526200003491620000f1565b6000805460ff1916905562000049336200007b565b600180546001600160a01b039384166001600160a01b0319918216179091556002805492909316911617905562000129565b600080546001600160a01b03838116610100818102610100600160a81b0319851617855560405193049190911692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a35050565b80516001600160a01b0381168114620000ec57600080fd5b919050565b600080604083850312156200010557600080fd5b6200011083620000d4565b91506200012060208401620000d4565b90509250929050565b6117c080620001396000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c80638da5cb5b11610097578063cfdd3d8e11610066578063cfdd3d8e14610205578063ea7b21bb14610233578063f2fde38b1461023b578063fd4194051461024e57600080fd5b80638da5cb5b146101a25780638e2965ba146101cc578063b3ea42b9146101df578063bedd2050146101f257600080fd5b80635c975abb116100d35780635c975abb1461016757806363b1dec814610172578063715018a6146101925780638456cb591461019a57600080fd5b8063202531c8146100fa57806336b882021461012a5780633f4ba83a1461015d575b600080fd5b61010d61010836600461115d565b61028a565b6040516101219897969594939291906111d1565b60405180910390f35b61014d61013836600461115d565b60046020526000908152604090205460ff1681565b6040519015158152602001610121565b6101656103ee565b005b60005460ff1661014d565b610185610180366004611234565b610400565b6040516101219190611256565b6101656105bb565b6101656105cd565b60005461010090046001600160a01b03165b6040516001600160a01b039091168152602001610121565b6001546101b4906001600160a01b031681565b6101656101ed3660046113a4565b6105dd565b6002546101b4906001600160a01b031681565b61014d6102133660046113eb565b805160208183018101805160078252928201919093012091525460ff1681565b610165610c7a565b61016561024936600461115d565b610eaa565b61027561025c366004611428565b6005602052600090815260409020805460019091015482565b60408051928352602083019190915201610121565b600360205260009081526040902080546001820180549192916102ac90611441565b80601f01602080910402602001604051908101604052809291908181526020018280546102d890611441565b80156103255780601f106102fa57610100808354040283529160200191610325565b820191906000526020600020905b81548152906001019060200180831161030857829003601f168201915b5050505050908060020154908060030160009054906101000a90046001600160a01b03169080600401549080600501549080600601549080600701805461036b90611441565b80601f016020809104026020016040519081016040528092919081815260200182805461039790611441565b80156103e45780601f106103b9576101008083540402835291602001916103e4565b820191906000526020600020905b8154815290600101906020018083116103c757829003601f168201915b5050505050905088565b6103f6610f23565b6103fe610f83565b565b6104086110fa565b60008381526006602090815260408083208584528252808320546001600160a01b031680845260038352818420825161010081019093528054835260018101805492959491929184019161045b90611441565b80601f016020809104026020016040519081016040528092919081815260200182805461048790611441565b80156104d45780601f106104a9576101008083540402835291602001916104d4565b820191906000526020600020905b8154815290600101906020018083116104b757829003601f168201915b50505091835250506002820154602082015260038201546001600160a01b031660408201526004820154606082015260058201546080820152600682015460a082015260078201805460c09092019161052c90611441565b80601f016020809104026020016040519081016040528092919081815260200182805461055890611441565b80156105a55780601f1061057a576101008083540402835291602001916105a5565b820191906000526020600020905b81548152906001019060200180831161058857829003601f168201915b5050509190925250919450505050505b92915050565b6105c3610f23565b6103fe6000610fd5565b6105d5610f23565b6103fe61102e565b6105e561106b565b6105ed6110fa565b3360009081526004602052604090205460ff16156106525760405162461bcd60e51b815260206004820152601760248201527f796f75206172652061206d656d626572206f662064616f00000000000000000060448201526064015b60405180910390fd5b6040516325ae16db60e11b815233600482015273cf7ed3acca5a467e9e704c703e8d87f634fb0fc990634b5c2db6906024016020604051808303816000875af11580156106a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106c7919061147b565b156107085760405162461bcd60e51b8152602060048201526011602482015270796f7520617265206f776e65722064616f60781b6044820152606401610649565b600782604051610718919061149d565b9081526040519081900360200190205460ff161561076d5760405162461bcd60e51b815260206004820152601260248201527113985b5948185b1c9958591e48195e1a5cdd60721b6044820152606401610649565b73cf7ed3acca5a467e9e704c703e8d87f634fb0fc96001600160a01b0316639f47ceff6040518163ffffffff1660e01b81526004016020604051808303816000875af11580156107c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107e591906114b9565b83111561082c5760405162461bcd60e51b815260206004820152601560248201527419185bc81a5908191bd95cc81b9bdd08195e1a5cdd605a1b6044820152606401610649565b60405163d70980cf60e01b81526004810184905260009073cf7ed3acca5a467e9e704c703e8d87f634fb0fc99063d70980cf906024016000604051808303816000875af1158015610881573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108a991908101906114d2565b93505050506000816001036108c8575068022b1c8c1227a000006108ec565b816002036108e05750680340aad21b3b7000006108ec565b5068056bc75e2d631000005b6040516370a0823160e01b81523360048201528190735fbdb2315678afecb367f032d93f642f64180aa3906370a0823190602401602060405180830381865afa15801561093d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061096191906114b9565b10156109af5760405162461bcd60e51b815260206004820152601960248201527f6e6f7420656e6f756768206d6f6e657920746f207472616465000000000000006044820152606401610649565b336000908152600360205260409020600601546109cf9062278d00611585565b4211610a0f5760405162461bcd60e51b815260206004820152600f60248201526e6e6f7420656e6f7567682074696d6560881b6044820152606401610649565b6001546040516323b872dd60e01b81523360048201526001600160a01b03909116602482015260448101829052735fbdb2315678afecb367f032d93f642f64180aa3906323b872dd906064016020604051808303816000875af1158015610a7a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a9e919061147b565b5060008581526005602052604081206001018054839290610ac0908490611585565b9091555050336060840181905260408085018790526020808601879052608086018490524260a087015281518083018352600681526561637469766560d01b8183015260e0870152600092835260048152818320805460ff19166001179055878352600590528120805491610b3483611598565b909155505060008581526005602090815260408083205486523383526003825290912084518155908401518491906001820190610b719082611600565b506040820151600282015560608201516003820180546001600160a01b0319166001600160a01b039092169190911790556080820151600482015560a0820151600582015560c0820151600682015560e08201516007820190610bd49082611600565b5050506000858152600660209081526040808320865184529091529081902080546001600160a01b0319163317905551600190600790610c1590879061149d565b908152604051908190036020018120805492151560ff19909316929092179091557fdcb52cb2319d5a89c247a2307cf43c2e7bc046699441fc0a612dcba58988e0fd90610c6b9033908790429086908b906116c0565b60405180910390a15050505050565b610c8261106b565b33600090815260036020908152604080832060049092529091205460ff161515600114610cf15760405162461bcd60e51b815260206004820152601b60248201527f796f7520617265206e6f742061206d656d626572206f662064616f00000000006044820152606401610649565b600154336000818152600360205260409081902060049081015491516323b872dd60e01b81526001600160a01b039094169084015260248301919091526044820152735fbdb2315678afecb367f032d93f642f64180aa3906323b872dd906064016020604051808303816000875af1158015610d71573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d95919061147b565b503360009081526003602090815260408083206004810154600290910154845260059092528220600101805491929091610dd0908490611701565b909155505033600090815260046020908152604091829020805460ff1916905581518083019092526008825267696e41637469766560c01b908201526007820190610e1b9082611600565b50426006820155336000908152600360205260408082209051600791610e4691600190910190611714565b9081526040805160209281900383018120805460ff191694151594909417909355600684015433845242928401929092528201527fd23d99204cc96426a4c580f3d1a6a95f01a1e35535ce2115643f3c99a629b6229060600160405180910390a150565b610eb2610f23565b6001600160a01b038116610f175760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610649565b610f2081610fd5565b50565b6000546001600160a01b036101009091041633146103fe5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610649565b610f8b6110b1565b6000805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b600080546001600160a01b03838116610100818102610100600160a81b0319851617855560405193049190911692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a35050565b61103661106b565b6000805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258610fb83390565b60005460ff16156103fe5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610649565b60005460ff166103fe5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610649565b60405180610100016040528060008152602001606081526020016000815260200160006001600160a01b03168152602001600081526020016000815260200160008152602001606081525090565b6001600160a01b0381168114610f2057600080fd5b60006020828403121561116f57600080fd5b813561117a81611148565b9392505050565b60005b8381101561119c578181015183820152602001611184565b50506000910152565b600081518084526111bd816020860160208601611181565b601f01601f19169290920160200192915050565b60006101008a83528060208401526111eb8184018b6111a5565b905088604084015260018060a01b03881660608401528660808401528560a08401528460c084015282810360e084015261122581856111a5565b9b9a5050505050505050505050565b6000806040838503121561124757600080fd5b50508035926020909101359150565b60208152815160208201526000602083015161010080604085015261127f6101208501836111a5565b91506040850151606085015260018060a01b036060860151166080850152608085015160a085015260a085015160c085015260c085015160e085015260e0850151601f1985840301828601526112d583826111a5565b9695505050505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561131e5761131e6112df565b604052919050565b600067ffffffffffffffff821115611340576113406112df565b50601f01601f191660200190565b600082601f83011261135f57600080fd5b813561137261136d82611326565b6112f5565b81815284602083860101111561138757600080fd5b816020850160208301376000918101602001919091529392505050565b600080604083850312156113b757600080fd5b82359150602083013567ffffffffffffffff8111156113d557600080fd5b6113e18582860161134e565b9150509250929050565b6000602082840312156113fd57600080fd5b813567ffffffffffffffff81111561141457600080fd5b6114208482850161134e565b949350505050565b60006020828403121561143a57600080fd5b5035919050565b600181811c9082168061145557607f821691505b60208210810361147557634e487b7160e01b600052602260045260246000fd5b50919050565b60006020828403121561148d57600080fd5b8151801515811461117a57600080fd5b600082516114af818460208701611181565b9190910192915050565b6000602082840312156114cb57600080fd5b5051919050565b600080600080608085870312156114e857600080fd5b84519350602085015167ffffffffffffffff81111561150657600080fd5b8501601f8101871361151757600080fd5b805161152561136d82611326565b81815288602083850101111561153a57600080fd5b61154b826020830160208601611181565b809550505050604085015161155f81611148565b6060959095015193969295505050565b634e487b7160e01b600052601160045260246000fd5b808201808211156105b5576105b561156f565b6000600182016115aa576115aa61156f565b5060010190565b601f8211156115fb57600081815260208120601f850160051c810160208610156115d85750805b601f850160051c820191505b818110156115f7578281556001016115e4565b5050505b505050565b815167ffffffffffffffff81111561161a5761161a6112df565b61162e816116288454611441565b846115b1565b602080601f831160018114611663576000841561164b5750858301515b600019600386901b1c1916600185901b1785556115f7565b600085815260208120601f198616915b8281101561169257888601518255948401946001909101908401611673565b50858210156116b05787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6001600160a01b038616815260a0602082018190526000906116e4908301876111a5565b604083019590955250606081019290925260809091015292915050565b818103818111156105b5576105b561156f565b600080835461172281611441565b6001828116801561173a576001811461174f5761177e565b60ff198416875282151583028701945061177e565b8760005260208060002060005b858110156117755781548a82015290840190820161175c565b50505082870194505b5092969550505050505056fea2646970667358221220076305677f4dc2d114824ead3a054641791ad09260e0bc3cf74fc6290edd7b4864736f6c63430008120033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100f55760003560e01c80638da5cb5b11610097578063cfdd3d8e11610066578063cfdd3d8e14610205578063ea7b21bb14610233578063f2fde38b1461023b578063fd4194051461024e57600080fd5b80638da5cb5b146101a25780638e2965ba146101cc578063b3ea42b9146101df578063bedd2050146101f257600080fd5b80635c975abb116100d35780635c975abb1461016757806363b1dec814610172578063715018a6146101925780638456cb591461019a57600080fd5b8063202531c8146100fa57806336b882021461012a5780633f4ba83a1461015d575b600080fd5b61010d61010836600461115d565b61028a565b6040516101219897969594939291906111d1565b60405180910390f35b61014d61013836600461115d565b60046020526000908152604090205460ff1681565b6040519015158152602001610121565b6101656103ee565b005b60005460ff1661014d565b610185610180366004611234565b610400565b6040516101219190611256565b6101656105bb565b6101656105cd565b60005461010090046001600160a01b03165b6040516001600160a01b039091168152602001610121565b6001546101b4906001600160a01b031681565b6101656101ed3660046113a4565b6105dd565b6002546101b4906001600160a01b031681565b61014d6102133660046113eb565b805160208183018101805160078252928201919093012091525460ff1681565b610165610c7a565b61016561024936600461115d565b610eaa565b61027561025c366004611428565b6005602052600090815260409020805460019091015482565b60408051928352602083019190915201610121565b600360205260009081526040902080546001820180549192916102ac90611441565b80601f01602080910402602001604051908101604052809291908181526020018280546102d890611441565b80156103255780601f106102fa57610100808354040283529160200191610325565b820191906000526020600020905b81548152906001019060200180831161030857829003601f168201915b5050505050908060020154908060030160009054906101000a90046001600160a01b03169080600401549080600501549080600601549080600701805461036b90611441565b80601f016020809104026020016040519081016040528092919081815260200182805461039790611441565b80156103e45780601f106103b9576101008083540402835291602001916103e4565b820191906000526020600020905b8154815290600101906020018083116103c757829003601f168201915b5050505050905088565b6103f6610f23565b6103fe610f83565b565b6104086110fa565b60008381526006602090815260408083208584528252808320546001600160a01b031680845260038352818420825161010081019093528054835260018101805492959491929184019161045b90611441565b80601f016020809104026020016040519081016040528092919081815260200182805461048790611441565b80156104d45780601f106104a9576101008083540402835291602001916104d4565b820191906000526020600020905b8154815290600101906020018083116104b757829003601f168201915b50505091835250506002820154602082015260038201546001600160a01b031660408201526004820154606082015260058201546080820152600682015460a082015260078201805460c09092019161052c90611441565b80601f016020809104026020016040519081016040528092919081815260200182805461055890611441565b80156105a55780601f1061057a576101008083540402835291602001916105a5565b820191906000526020600020905b81548152906001019060200180831161058857829003601f168201915b5050509190925250919450505050505b92915050565b6105c3610f23565b6103fe6000610fd5565b6105d5610f23565b6103fe61102e565b6105e561106b565b6105ed6110fa565b3360009081526004602052604090205460ff16156106525760405162461bcd60e51b815260206004820152601760248201527f796f75206172652061206d656d626572206f662064616f00000000000000000060448201526064015b60405180910390fd5b6040516325ae16db60e11b815233600482015273cf7ed3acca5a467e9e704c703e8d87f634fb0fc990634b5c2db6906024016020604051808303816000875af11580156106a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106c7919061147b565b156107085760405162461bcd60e51b8152602060048201526011602482015270796f7520617265206f776e65722064616f60781b6044820152606401610649565b600782604051610718919061149d565b9081526040519081900360200190205460ff161561076d5760405162461bcd60e51b815260206004820152601260248201527113985b5948185b1c9958591e48195e1a5cdd60721b6044820152606401610649565b73cf7ed3acca5a467e9e704c703e8d87f634fb0fc96001600160a01b0316639f47ceff6040518163ffffffff1660e01b81526004016020604051808303816000875af11580156107c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107e591906114b9565b83111561082c5760405162461bcd60e51b815260206004820152601560248201527419185bc81a5908191bd95cc81b9bdd08195e1a5cdd605a1b6044820152606401610649565b60405163d70980cf60e01b81526004810184905260009073cf7ed3acca5a467e9e704c703e8d87f634fb0fc99063d70980cf906024016000604051808303816000875af1158015610881573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108a991908101906114d2565b93505050506000816001036108c8575068022b1c8c1227a000006108ec565b816002036108e05750680340aad21b3b7000006108ec565b5068056bc75e2d631000005b6040516370a0823160e01b81523360048201528190735fbdb2315678afecb367f032d93f642f64180aa3906370a0823190602401602060405180830381865afa15801561093d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061096191906114b9565b10156109af5760405162461bcd60e51b815260206004820152601960248201527f6e6f7420656e6f756768206d6f6e657920746f207472616465000000000000006044820152606401610649565b336000908152600360205260409020600601546109cf9062278d00611585565b4211610a0f5760405162461bcd60e51b815260206004820152600f60248201526e6e6f7420656e6f7567682074696d6560881b6044820152606401610649565b6001546040516323b872dd60e01b81523360048201526001600160a01b03909116602482015260448101829052735fbdb2315678afecb367f032d93f642f64180aa3906323b872dd906064016020604051808303816000875af1158015610a7a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a9e919061147b565b5060008581526005602052604081206001018054839290610ac0908490611585565b9091555050336060840181905260408085018790526020808601879052608086018490524260a087015281518083018352600681526561637469766560d01b8183015260e0870152600092835260048152818320805460ff19166001179055878352600590528120805491610b3483611598565b909155505060008581526005602090815260408083205486523383526003825290912084518155908401518491906001820190610b719082611600565b506040820151600282015560608201516003820180546001600160a01b0319166001600160a01b039092169190911790556080820151600482015560a0820151600582015560c0820151600682015560e08201516007820190610bd49082611600565b5050506000858152600660209081526040808320865184529091529081902080546001600160a01b0319163317905551600190600790610c1590879061149d565b908152604051908190036020018120805492151560ff19909316929092179091557fdcb52cb2319d5a89c247a2307cf43c2e7bc046699441fc0a612dcba58988e0fd90610c6b9033908790429086908b906116c0565b60405180910390a15050505050565b610c8261106b565b33600090815260036020908152604080832060049092529091205460ff161515600114610cf15760405162461bcd60e51b815260206004820152601b60248201527f796f7520617265206e6f742061206d656d626572206f662064616f00000000006044820152606401610649565b600154336000818152600360205260409081902060049081015491516323b872dd60e01b81526001600160a01b039094169084015260248301919091526044820152735fbdb2315678afecb367f032d93f642f64180aa3906323b872dd906064016020604051808303816000875af1158015610d71573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d95919061147b565b503360009081526003602090815260408083206004810154600290910154845260059092528220600101805491929091610dd0908490611701565b909155505033600090815260046020908152604091829020805460ff1916905581518083019092526008825267696e41637469766560c01b908201526007820190610e1b9082611600565b50426006820155336000908152600360205260408082209051600791610e4691600190910190611714565b9081526040805160209281900383018120805460ff191694151594909417909355600684015433845242928401929092528201527fd23d99204cc96426a4c580f3d1a6a95f01a1e35535ce2115643f3c99a629b6229060600160405180910390a150565b610eb2610f23565b6001600160a01b038116610f175760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610649565b610f2081610fd5565b50565b6000546001600160a01b036101009091041633146103fe5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610649565b610f8b6110b1565b6000805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b600080546001600160a01b03838116610100818102610100600160a81b0319851617855560405193049190911692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a35050565b61103661106b565b6000805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258610fb83390565b60005460ff16156103fe5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610649565b60005460ff166103fe5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610649565b60405180610100016040528060008152602001606081526020016000815260200160006001600160a01b03168152602001600081526020016000815260200160008152602001606081525090565b6001600160a01b0381168114610f2057600080fd5b60006020828403121561116f57600080fd5b813561117a81611148565b9392505050565b60005b8381101561119c578181015183820152602001611184565b50506000910152565b600081518084526111bd816020860160208601611181565b601f01601f19169290920160200192915050565b60006101008a83528060208401526111eb8184018b6111a5565b905088604084015260018060a01b03881660608401528660808401528560a08401528460c084015282810360e084015261122581856111a5565b9b9a5050505050505050505050565b6000806040838503121561124757600080fd5b50508035926020909101359150565b60208152815160208201526000602083015161010080604085015261127f6101208501836111a5565b91506040850151606085015260018060a01b036060860151166080850152608085015160a085015260a085015160c085015260c085015160e085015260e0850151601f1985840301828601526112d583826111a5565b9695505050505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561131e5761131e6112df565b604052919050565b600067ffffffffffffffff821115611340576113406112df565b50601f01601f191660200190565b600082601f83011261135f57600080fd5b813561137261136d82611326565b6112f5565b81815284602083860101111561138757600080fd5b816020850160208301376000918101602001919091529392505050565b600080604083850312156113b757600080fd5b82359150602083013567ffffffffffffffff8111156113d557600080fd5b6113e18582860161134e565b9150509250929050565b6000602082840312156113fd57600080fd5b813567ffffffffffffffff81111561141457600080fd5b6114208482850161134e565b949350505050565b60006020828403121561143a57600080fd5b5035919050565b600181811c9082168061145557607f821691505b60208210810361147557634e487b7160e01b600052602260045260246000fd5b50919050565b60006020828403121561148d57600080fd5b8151801515811461117a57600080fd5b600082516114af818460208701611181565b9190910192915050565b6000602082840312156114cb57600080fd5b5051919050565b600080600080608085870312156114e857600080fd5b84519350602085015167ffffffffffffffff81111561150657600080fd5b8501601f8101871361151757600080fd5b805161152561136d82611326565b81815288602083850101111561153a57600080fd5b61154b826020830160208601611181565b809550505050604085015161155f81611148565b6060959095015193969295505050565b634e487b7160e01b600052601160045260246000fd5b808201808211156105b5576105b561156f565b6000600182016115aa576115aa61156f565b5060010190565b601f8211156115fb57600081815260208120601f850160051c810160208610156115d85750805b601f850160051c820191505b818110156115f7578281556001016115e4565b5050505b505050565b815167ffffffffffffffff81111561161a5761161a6112df565b61162e816116288454611441565b846115b1565b602080601f831160018114611663576000841561164b5750858301515b600019600386901b1c1916600185901b1785556115f7565b600085815260208120601f198616915b8281101561169257888601518255948401946001909101908401611673565b50858210156116b05787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6001600160a01b038616815260a0602082018190526000906116e4908301876111a5565b604083019590955250606081019290925260809091015292915050565b818103818111156105b5576105b561156f565b600080835461172281611441565b6001828116801561173a576001811461174f5761177e565b60ff198416875282151583028701945061177e565b8760005260208060002060005b858110156117755781548a82015290840190820161175c565b50505082870194505b5092969550505050505056fea2646970667358221220076305677f4dc2d114824ead3a054641791ad09260e0bc3cf74fc6290edd7b4864736f6c63430008120033",
  "devdoc": {
    "events": {
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      }
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 130,
        "contract": "contracts/AihomeDaoStaking.sol:AihomeDaoStaking",
        "label": "_paused",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 7,
        "contract": "contracts/AihomeDaoStaking.sol:AihomeDaoStaking",
        "label": "_owner",
        "offset": 1,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 363,
        "contract": "contracts/AihomeDaoStaking.sol:AihomeDaoStaking",
        "label": "accountReceiveTicketPrice",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 365,
        "contract": "contracts/AihomeDaoStaking.sol:AihomeDaoStaking",
        "label": "accountReceiveStaking",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 392,
        "contract": "contracts/AihomeDaoStaking.sol:AihomeDaoStaking",
        "label": "profileMemberDao",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_struct(ProfileMember)387_storage)"
      },
      {
        "astId": 396,
        "contract": "contracts/AihomeDaoStaking.sol:AihomeDaoStaking",
        "label": "isMemberDao",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 401,
        "contract": "contracts/AihomeDaoStaking.sol:AihomeDaoStaking",
        "label": "profileDaoById",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_struct(ProfileDao)370_storage)"
      },
      {
        "astId": 407,
        "contract": "contracts/AihomeDaoStaking.sol:AihomeDaoStaking",
        "label": "getAddressDaoById",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_address))"
      },
      {
        "astId": 411,
        "contract": "contracts/AihomeDaoStaking.sol:AihomeDaoStaking",
        "label": "isExistName",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_string_memory_ptr,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(ProfileMember)387_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct AihomeDaoStaking.ProfileMember)",
        "numberOfBytes": "32",
        "value": "t_struct(ProfileMember)387_storage"
      },
      "t_mapping(t_string_memory_ptr,t_bool)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_address))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_address)"
      },
      "t_mapping(t_uint256,t_struct(ProfileDao)370_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct AihomeDaoStaking.ProfileDao)",
        "numberOfBytes": "32",
        "value": "t_struct(ProfileDao)370_storage"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(ProfileDao)370_storage": {
        "encoding": "inplace",
        "label": "struct AihomeDaoStaking.ProfileDao",
        "members": [
          {
            "astId": 367,
            "contract": "contracts/AihomeDaoStaking.sol:AihomeDaoStaking",
            "label": "totalMember",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 369,
            "contract": "contracts/AihomeDaoStaking.sol:AihomeDaoStaking",
            "label": "totalStake",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(ProfileMember)387_storage": {
        "encoding": "inplace",
        "label": "struct AihomeDaoStaking.ProfileMember",
        "members": [
          {
            "astId": 372,
            "contract": "contracts/AihomeDaoStaking.sol:AihomeDaoStaking",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 374,
            "contract": "contracts/AihomeDaoStaking.sol:AihomeDaoStaking",
            "label": "name",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 376,
            "contract": "contracts/AihomeDaoStaking.sol:AihomeDaoStaking",
            "label": "daoId",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 378,
            "contract": "contracts/AihomeDaoStaking.sol:AihomeDaoStaking",
            "label": "addressUser",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 380,
            "contract": "contracts/AihomeDaoStaking.sol:AihomeDaoStaking",
            "label": "amountStaking",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 382,
            "contract": "contracts/AihomeDaoStaking.sol:AihomeDaoStaking",
            "label": "timeJoinDao",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 384,
            "contract": "contracts/AihomeDaoStaking.sol:AihomeDaoStaking",
            "label": "timeLeaveDao",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 386,
            "contract": "contracts/AihomeDaoStaking.sol:AihomeDaoStaking",
            "label": "status",
            "offset": 0,
            "slot": "7",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}