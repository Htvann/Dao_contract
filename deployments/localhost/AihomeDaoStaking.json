{
  "address": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_accountReceiveTicketPrice",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_accountReceiveStaking",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "idDao",
          "type": "uint256"
        }
      ],
      "name": "JoinDao",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timeJoinDao",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "idDao",
          "type": "uint256"
        }
      ],
      "name": "LeaveDao",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "accountReceiveStaking",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "accountReceiveTicketPrice",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getInfoMemberById",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "daoId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "addressUser",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountStaking",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timeJoinDao",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timeLeaveDao",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "status",
              "type": "string"
            }
          ],
          "internalType": "struct AihomeDaoStaking.ProfileMember",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isMemberDao",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "joinDao",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "leaveDao",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "profileDaoById",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalMember",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalStake",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "profileMemberDao",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "daoId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "addressUser",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountStaking",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timeJoinDao",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timeLeaveDao",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "status",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x543bc45b6ea101cc755fa2f95590ded7dceecb5e635464df0423f3e83deb39eb",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
    "transactionIndex": 0,
    "gasUsed": "1161823",
    "logsBloom": "0x
    "blockHash": "0x02f1d1daa6c83e2018fef0c894e4c7a0c19167008cc44cc820ffc233f8c2c37b",
    "transactionHash": "0x543bc45b6ea101cc755fa2f95590ded7dceecb5e635464df0423f3e83deb39eb",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 4,
        "transactionHash": "0x543bc45b6ea101cc755fa2f95590ded7dceecb5e635464df0423f3e83deb39eb",
        "address": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x02f1d1daa6c83e2018fef0c894e4c7a0c19167008cc44cc820ffc233f8c2c37b"
      }
    ],
    "blockNumber": 4,
    "cumulativeGasUsed": "1161823",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266"
  ],
  "numDeployments": 1,
  "solcInputHash": "31fbe20d05d88b18d991fe7e209aa692",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_accountReceiveTicketPrice\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_accountReceiveStaking\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"idDao\",\"type\":\"uint256\"}],\"name\":\"JoinDao\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timeJoinDao\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"idDao\",\"type\":\"uint256\"}],\"name\":\"LeaveDao\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"accountReceiveStaking\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accountReceiveTicketPrice\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getInfoMemberById\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"daoId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"addressUser\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountStaking\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeJoinDao\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeLeaveDao\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"status\",\"type\":\"string\"}],\"internalType\":\"struct AihomeDaoStaking.ProfileMember\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isMemberDao\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"joinDao\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"leaveDao\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"profileDaoById\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalMember\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStake\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"profileMemberDao\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"daoId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"addressUser\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountStaking\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeJoinDao\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeLeaveDao\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"status\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/AihomeDaoStaking.sol\":\"AihomeDaoStaking\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/AihomeDaoStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\npragma solidity ^0.8.9;\\n\\ninterface IAIHomesDao {\\n    function profilesLength() external returns (uint256 length);\\n\\n    function profilesById(\\n        uint256 _id\\n    )\\n        external\\n        returns (uint256 id, string memory name, address owner, uint256 option);\\n}\\n\\ncontract AihomeDaoStaking is Pausable, Ownable {\\n    //NOTE: testnet\\n    // address constant HOMES = 0x8402c360a9C1C9214D870c00835450899bC4F318;\\n    // address constant AIHomesDao = 0xf355A894C449D81570E5C4B7da43Ca266987808c;\\n\\n    //NOTE: local\\n    address constant HOMES = 0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512;\\n    address constant AIHomesDao = 0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0;\\n\\n    address public accountReceiveTicketPrice;\\n    address public accountReceiveStaking;\\n\\n    struct ProfileDao {\\n        uint256 totalMember;\\n        uint256 totalStake;\\n    }\\n\\n    struct ProfileMember {\\n        uint256 id;\\n        uint256 daoId;\\n        address addressUser;\\n        uint256 amountStaking;\\n        uint256 timeJoinDao;\\n        uint256 timeLeaveDao;\\n        string status;\\n    }\\n\\n    mapping(address => ProfileMember) public profileMemberDao;\\n    mapping(address => bool) public isMemberDao;\\n    mapping(uint256 => ProfileDao) public profileDaoById;\\n    mapping(uint256 => mapping(uint256 => address)) private getAddressDaoById;\\n\\n    event JoinDao(address by, uint256 timestamp, uint256 amount, uint256 idDao);\\n    event LeaveDao(address by, uint256 timeJoinDao, uint256 idDao);\\n\\n    constructor(\\n        address _accountReceiveTicketPrice,\\n        address _accountReceiveStaking\\n    ) {\\n        accountReceiveTicketPrice = _accountReceiveTicketPrice;\\n        accountReceiveStaking = _accountReceiveStaking;\\n    }\\n\\n    function pause() public onlyOwner {\\n        _pause();\\n    }\\n\\n    function unpause() public onlyOwner {\\n        _unpause();\\n    }\\n\\n    function joinDao(uint256 _id) public whenNotPaused {\\n        ProfileMember memory info;\\n        require(isMemberDao[msg.sender] == false, \\\"you are a member of dao\\\");\\n        require(\\n            _id <= IAIHomesDao(AIHomesDao).profilesLength(),\\n            \\\"dao id does not exist\\\"\\n        );\\n        (, , , uint256 _option) = IAIHomesDao(AIHomesDao).profilesById(_id);\\n\\n        uint256 priceStake;\\n\\n        if (_option == 1) {\\n            priceStake = 40 ether;\\n        } else if (_option == 2) {\\n            priceStake = 60 ether;\\n        } else {\\n            priceStake = 100 ether;\\n        }\\n        require(\\n            IERC20(HOMES).balanceOf(msg.sender) >= priceStake,\\n            \\\"not enough money to trade\\\"\\n        );\\n        require(\\n            block.timestamp >\\n                profileMemberDao[msg.sender].timeLeaveDao + 30 days,\\n            \\\"not enough time\\\"\\n        );\\n\\n        IERC20(HOMES).transferFrom(\\n            msg.sender,\\n            accountReceiveTicketPrice,\\n            priceStake\\n        );\\n\\n        profileDaoById[_id].totalStake += priceStake;\\n\\n        info.addressUser = msg.sender;\\n        info.daoId = _id;\\n        info.amountStaking = priceStake;\\n        info.timeJoinDao = block.timestamp;\\n        info.status = \\\"active\\\";\\n        isMemberDao[msg.sender] = true;\\n        profileDaoById[_id].totalMember++;\\n        info.id = profileDaoById[_id].totalMember;\\n\\n        profileMemberDao[msg.sender] = info;\\n        getAddressDaoById[_id][info.id] = msg.sender;\\n\\n        emit JoinDao(msg.sender, block.timestamp, priceStake, _id);\\n    }\\n\\n    function leaveDao() public whenNotPaused {\\n        ProfileMember storage info = profileMemberDao[msg.sender];\\n        require(isMemberDao[msg.sender] == true, \\\"you are not a member of dao\\\");\\n\\n        IERC20(HOMES).transferFrom(\\n            accountReceiveTicketPrice,\\n            msg.sender,\\n            profileMemberDao[msg.sender].amountStaking\\n        );\\n\\n        profileDaoById[profileMemberDao[msg.sender].daoId]\\n            .totalStake -= profileMemberDao[msg.sender].amountStaking;\\n\\n        isMemberDao[msg.sender] = false;\\n        info.status = \\\"inActive\\\";\\n        info.timeLeaveDao = block.timestamp;\\n\\n        emit LeaveDao(msg.sender, block.timestamp, info.timeLeaveDao);\\n    }\\n\\n    function getInfoMemberById(\\n        uint256 _id,\\n        uint256 _index\\n    ) public view returns (ProfileMember memory) {\\n        address add = getAddressDaoById[_id][_index];\\n        ProfileMember memory member = profileMemberDao[add];\\n        return member;\\n    }\\n}\\n\",\"keccak256\":\"0xe31564119013d2f3a1fe3a7721ca2bbdc73ddd69dc1381d5164e0a3dd47f3bea\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100ea5760003560e01c80638456cb591161008c578063bedd205011610066578063bedd2050146101e6578063ea7b21bb146101f9578063f2fde38b14610201578063fd4194051461021457600080fd5b80638456cb59146101a15780638da5cb5b146101a95780638e2965ba146101d357600080fd5b80633f4ba83a116100c85780633f4ba83a146101665780635c975abb1461016e57806363b1dec814610179578063715018a61461019957600080fd5b806318084fd9146100ef578063202531c81461010457806336b8820214610133575b600080fd5b6101026100fd366004610e3b565b610250565b005b610117610112366004610e69565b61078f565b60405161012a9796959493929190610edd565b60405180910390f35b610156610141366004610e69565b60046020526000908152604090205460ff1681565b604051901515815260200161012a565b610102610863565b60005460ff16610156565b61018c610187366004610f29565b610875565b60405161012a9190610f4b565b610102610998565b6101026109aa565b60005461010090046001600160a01b03165b6040516001600160a01b03909116815260200161012a565b6001546101bb906001600160a01b031681565b6002546101bb906001600160a01b031681565b6101026109ba565b61010261020f366004610e69565b610ba5565b61023b610222366004610e3b565b6005602052600090815260409020805460019091015482565b6040805192835260208301919091520161012a565b610258610c1e565b610260610df5565b3360009081526004602052604090205460ff16156102c55760405162461bcd60e51b815260206004820152601760248201527f796f75206172652061206d656d626572206f662064616f00000000000000000060448201526064015b60405180910390fd5b739fe46736679d2d9a65f0992f2272de9f3c7fa6e06001600160a01b0316639f47ceff6040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610319573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061033d9190610fb3565b8211156103845760405162461bcd60e51b815260206004820152601560248201527419185bc81a5908191bd95cc81b9bdd08195e1a5cdd605a1b60448201526064016102bc565b60405163d70980cf60e01b815260048101839052600090739fe46736679d2d9a65f0992f2272de9f3c7fa6e09063d70980cf906024016000604051808303816000875af11580156103d9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104019190810190610ff2565b9350505050600081600103610420575068022b1c8c1227a00000610444565b816002036104385750680340aad21b3b700000610444565b5068056bc75e2d631000005b6040516370a0823160e01b8152336004820152819073e7f1725e7734ce288f8367e1bb143e90bb3f0512906370a0823190602401602060405180830381865afa158015610495573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104b99190610fb3565b10156105075760405162461bcd60e51b815260206004820152601960248201527f6e6f7420656e6f756768206d6f6e657920746f2074726164650000000000000060448201526064016102bc565b336000908152600360205260409020600501546105279062278d006110d9565b42116105675760405162461bcd60e51b815260206004820152600f60248201526e6e6f7420656e6f7567682074696d6560881b60448201526064016102bc565b6001546040516323b872dd60e01b81523360048201526001600160a01b0390911660248201526044810182905273e7f1725e7734ce288f8367e1bb143e90bb3f0512906323b872dd906064016020604051808303816000875af11580156105d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105f691906110ec565b50600084815260056020526040812060010180548392906106189084906110d9565b909155505033604080850182905260208086018790526060860184905242608087015281518083018352600681526561637469766560d01b8183015260c0870152600092835260048152818320805460ff191660011790558683526005905281208054916106858361110e565b90915550506000848152600560208181526040808420548752338452600380835293819020875181559187015160018301558601516002820180546001600160a01b0319166001600160a01b039092169190911790556060860151928101929092556080850151600483015560a08501519082015560c0840151849190600682019061071190826111b0565b50505060008481526006602090815260408083208651845282529182902080546001600160a01b0319163390811790915582519081524291810191909152908101829052606081018590527f0e2284e046c8d8d19c5481016672115d53f5e23e9766c7e8ce363dbc8c0fde809060800160405180910390a150505050565b60036020819052600091825260409091208054600182015460028301549383015460048401546005850154600686018054959794966001600160a01b0390951695939492939192916107e090611127565b80601f016020809104026020016040519081016040528092919081815260200182805461080c90611127565b80156108595780601f1061082e57610100808354040283529160200191610859565b820191906000526020600020905b81548152906001019060200180831161083c57829003601f168201915b5050505050905087565b61086b610c64565b610873610cc4565b565b61087d610df5565b60008381526006602081815260408084208685528252808420546001600160a01b039081168086526003808552838720845160e0810186528154815260018201549681019690965260028101549093169385019390935291810154606084015260048101546080840152600581015460a084015292830180549194939160c08401919061090990611127565b80601f016020809104026020016040519081016040528092919081815260200182805461093590611127565b80156109825780601f1061095757610100808354040283529160200191610982565b820191906000526020600020905b81548152906001019060200180831161096557829003601f168201915b5050509190925250919450505050505b92915050565b6109a0610c64565b6108736000610d16565b6109b2610c64565b610873610d6f565b6109c2610c1e565b33600090815260036020908152604080832060049092529091205460ff161515600114610a315760405162461bcd60e51b815260206004820152601b60248201527f796f7520617265206e6f742061206d656d626572206f662064616f000000000060448201526064016102bc565b60015433600081815260036020819052604091829020015490516323b872dd60e01b81526001600160a01b0390931660048401526024830191909152604482015273e7f1725e7734ce288f8367e1bb143e90bb3f0512906323b872dd906064016020604051808303816000875af1158015610ab0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad491906110ec565b5033600090815260036020818152604080842092830154600193840154855260059092528320909101805491929091610b0e908490611270565b909155505033600090815260046020908152604091829020805460ff1916905581518083019092526008825267696e41637469766560c01b908201526006820190610b5990826111b0565b504260058201819055604080513381526020810183905280820192909252517fd23d99204cc96426a4c580f3d1a6a95f01a1e35535ce2115643f3c99a629b6229181900360600190a150565b610bad610c64565b6001600160a01b038116610c125760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016102bc565b610c1b81610d16565b50565b60005460ff16156108735760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016102bc565b6000546001600160a01b036101009091041633146108735760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102bc565b610ccc610dac565b6000805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b600080546001600160a01b03838116610100818102610100600160a81b0319851617855560405193049190911692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a35050565b610d77610c1e565b6000805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258610cf93390565b60005460ff166108735760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016102bc565b6040518060e00160405280600081526020016000815260200160006001600160a01b03168152602001600081526020016000815260200160008152602001606081525090565b600060208284031215610e4d57600080fd5b5035919050565b6001600160a01b0381168114610c1b57600080fd5b600060208284031215610e7b57600080fd5b8135610e8681610e54565b9392505050565b60005b83811015610ea8578181015183820152602001610e90565b50506000910152565b60008151808452610ec9816020860160208601610e8d565b601f01601f19169290920160200192915050565b87815286602082015260018060a01b03861660408201528460608201528360808201528260a082015260e060c08201526000610f1c60e0830184610eb1565b9998505050505050505050565b60008060408385031215610f3c57600080fd5b50508035926020909101359150565b60208152815160208201526020820151604082015260018060a01b03604083015116606082015260608201516080820152608082015160a082015260a082015160c0820152600060c083015160e080840152610fab610100840182610eb1565b949350505050565b600060208284031215610fc557600080fd5b5051919050565b634e487b7160e01b600052604160045260246000fd5b8051610fed81610e54565b919050565b6000806000806080858703121561100857600080fd5b84519350602085015167ffffffffffffffff8082111561102757600080fd5b818701915087601f83011261103b57600080fd5b81518181111561104d5761104d610fcc565b604051601f8201601f19908116603f0116810190838211818310171561107557611075610fcc565b816040528281528a602084870101111561108e57600080fd5b61109f836020830160208801610e8d565b80975050505050506110b360408601610fe2565b6060959095015193969295505050565b634e487b7160e01b600052601160045260246000fd5b80820180821115610992576109926110c3565b6000602082840312156110fe57600080fd5b81518015158114610e8657600080fd5b600060018201611120576111206110c3565b5060010190565b600181811c9082168061113b57607f821691505b60208210810361115b57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156111ab57600081815260208120601f850160051c810160208610156111885750805b601f850160051c820191505b818110156111a757828155600101611194565b5050505b505050565b815167ffffffffffffffff8111156111ca576111ca610fcc565b6111de816111d88454611127565b84611161565b602080601f83116001811461121357600084156111fb5750858301515b600019600386901b1c1916600185901b1785556111a7565b600085815260208120601f198616915b8281101561124257888601518255948401946001909101908401611223565b50858210156112605787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b81810381811115610992576109926110c356fea264697066735822122024fd166db0a698bc27b0405a46d8ef4babec725b5d23157615d0bb99726dd71964736f6c63430008120033",
  "devdoc": {
    "events": {
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      }
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 930,
        "contract": "contracts/AihomeDaoStaking.sol:AihomeDaoStaking",
        "label": "_paused",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 807,
        "contract": "contracts/AihomeDaoStaking.sol:AihomeDaoStaking",
        "label": "_owner",
        "offset": 1,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2674,
        "contract": "contracts/AihomeDaoStaking.sol:AihomeDaoStaking",
        "label": "accountReceiveTicketPrice",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 2676,
        "contract": "contracts/AihomeDaoStaking.sol:AihomeDaoStaking",
        "label": "accountReceiveStaking",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 2701,
        "contract": "contracts/AihomeDaoStaking.sol:AihomeDaoStaking",
        "label": "profileMemberDao",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_struct(ProfileMember)2696_storage)"
      },
      {
        "astId": 2705,
        "contract": "contracts/AihomeDaoStaking.sol:AihomeDaoStaking",
        "label": "isMemberDao",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2710,
        "contract": "contracts/AihomeDaoStaking.sol:AihomeDaoStaking",
        "label": "profileDaoById",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_struct(ProfileDao)2681_storage)"
      },
      {
        "astId": 2716,
        "contract": "contracts/AihomeDaoStaking.sol:AihomeDaoStaking",
        "label": "getAddressDaoById",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_address))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(ProfileMember)2696_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct AihomeDaoStaking.ProfileMember)",
        "numberOfBytes": "32",
        "value": "t_struct(ProfileMember)2696_storage"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_address))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_address)"
      },
      "t_mapping(t_uint256,t_struct(ProfileDao)2681_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct AihomeDaoStaking.ProfileDao)",
        "numberOfBytes": "32",
        "value": "t_struct(ProfileDao)2681_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(ProfileDao)2681_storage": {
        "encoding": "inplace",
        "label": "struct AihomeDaoStaking.ProfileDao",
        "members": [
          {
            "astId": 2678,
            "contract": "contracts/AihomeDaoStaking.sol:AihomeDaoStaking",
            "label": "totalMember",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2680,
            "contract": "contracts/AihomeDaoStaking.sol:AihomeDaoStaking",
            "label": "totalStake",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(ProfileMember)2696_storage": {
        "encoding": "inplace",
        "label": "struct AihomeDaoStaking.ProfileMember",
        "members": [
          {
            "astId": 2683,
            "contract": "contracts/AihomeDaoStaking.sol:AihomeDaoStaking",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2685,
            "contract": "contracts/AihomeDaoStaking.sol:AihomeDaoStaking",
            "label": "daoId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2687,
            "contract": "contracts/AihomeDaoStaking.sol:AihomeDaoStaking",
            "label": "addressUser",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 2689,
            "contract": "contracts/AihomeDaoStaking.sol:AihomeDaoStaking",
            "label": "amountStaking",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 2691,
            "contract": "contracts/AihomeDaoStaking.sol:AihomeDaoStaking",
            "label": "timeJoinDao",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 2693,
            "contract": "contracts/AihomeDaoStaking.sol:AihomeDaoStaking",
            "label": "timeLeaveDao",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 2695,
            "contract": "contracts/AihomeDaoStaking.sol:AihomeDaoStaking",
            "label": "status",
            "offset": 0,
            "slot": "6",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}