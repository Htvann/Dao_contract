{
  "address": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_accountReceiveTicketPrice",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_accountReceiveStaking",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "idDao",
          "type": "uint256"
        }
      ],
      "name": "JoinDao",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timeJoinDao",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "idDao",
          "type": "uint256"
        }
      ],
      "name": "LeaveDao",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "idDao",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timeStamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountStaking",
          "type": "uint256"
        }
      ],
      "name": "StakeDao",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "accountReceiveStaking",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "accountReceiveTicketPrice",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getInfoMemberById",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "daoId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "addressUser",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountStaking",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timeJoinDao",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timeLeaveDao",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "status",
              "type": "string"
            }
          ],
          "internalType": "struct AihomeDaoStaking.ProfileMember",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isMemberDao",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "joinDao",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "leaveDao",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "profileMemberDao",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "daoId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "addressUser",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountStaking",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timeJoinDao",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timeLeaveDao",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "status",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ticketPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "totalAmountStake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "totalMemberInDao",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x3b50b71ba75b1665ee70aa152a1fd17e5cca436387ced5e4b4080f84f2aa7cd6",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
    "transactionIndex": 0,
    "gasUsed": "1238614",
    "logsBloom": "0x
    "blockHash": "0xcc5dccdcc394bc2c3bdfafc1422ae8013e2aaa78662abe48f234c51a6f60cfb6",
    "transactionHash": "0x3b50b71ba75b1665ee70aa152a1fd17e5cca436387ced5e4b4080f84f2aa7cd6",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 4,
        "transactionHash": "0x3b50b71ba75b1665ee70aa152a1fd17e5cca436387ced5e4b4080f84f2aa7cd6",
        "address": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xcc5dccdcc394bc2c3bdfafc1422ae8013e2aaa78662abe48f234c51a6f60cfb6"
      }
    ],
    "blockNumber": 4,
    "cumulativeGasUsed": "1238614",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266"
  ],
  "numDeployments": 1,
  "solcInputHash": "820067af529a8db407c18ab181401713",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_accountReceiveTicketPrice\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_accountReceiveStaking\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"idDao\",\"type\":\"uint256\"}],\"name\":\"JoinDao\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timeJoinDao\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"idDao\",\"type\":\"uint256\"}],\"name\":\"LeaveDao\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"idDao\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timeStamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountStaking\",\"type\":\"uint256\"}],\"name\":\"StakeDao\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"accountReceiveStaking\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accountReceiveTicketPrice\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getInfoMemberById\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"daoId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"addressUser\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountStaking\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeJoinDao\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeLeaveDao\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"status\",\"type\":\"string\"}],\"internalType\":\"struct AihomeDaoStaking.ProfileMember\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isMemberDao\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"joinDao\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"leaveDao\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"profileMemberDao\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"daoId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"addressUser\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountStaking\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeJoinDao\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeLeaveDao\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"status\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ticketPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalAmountStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalMemberInDao\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/AihomeDaoStaking.sol\":\"AihomeDaoStaking\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/AihomeDaoStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IAIHomesDao {\\n    function profilesLength() external returns (uint256 length);\\n}\\n\\ncontract AihomeDaoStaking is Pausable, Ownable {\\n    uint256 public ticketPrice = 100 ether;\\n\\n    //NOTE: testnet\\n\\n    // address constant HOMES = 0x8402c360a9C1C9214D870c00835450899bC4F318;\\n    // address constant AIHomesDao = 0xf355A894C449D81570E5C4B7da43Ca266987808c;\\n\\n    //NOTE: local\\n\\n    address constant HOMES = 0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512;\\n    address constant AIHomesDao = 0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0;\\n\\n    address public accountReceiveTicketPrice;\\n    address public accountReceiveStaking;\\n\\n    struct ProfileMember {\\n        uint256 id;\\n        uint256 daoId;\\n        address addressUser;\\n        uint256 amountStaking;\\n        uint256 timeJoinDao;\\n        uint256 timeLeaveDao;\\n        string status;\\n    }\\n\\n    mapping(address => ProfileMember) public profileMemberDao;\\n    mapping(address => bool) public isMemberDao;\\n    mapping(uint256 => uint256) public totalMemberInDao;\\n    mapping(uint256 => uint256) public totalAmountStake;\\n    mapping(uint256 => mapping(uint256 => address)) private getAddressDaoById;\\n\\n    event JoinDao(address by, uint256 timestamp, uint256 amount, uint256 idDao);\\n    event StakeDao(\\n        address by,\\n        uint256 idDao,\\n        uint256 timeStamp,\\n        uint256 amountStaking\\n    );\\n    event LeaveDao(address by, uint256 timeJoinDao, uint256 idDao);\\n\\n    constructor(\\n        address _accountReceiveTicketPrice,\\n        address _accountReceiveStaking\\n    ) {\\n        accountReceiveTicketPrice = _accountReceiveTicketPrice;\\n        accountReceiveStaking = _accountReceiveStaking;\\n    }\\n\\n    function pause() public onlyOwner {\\n        _pause();\\n    }\\n\\n    function unpause() public onlyOwner {\\n        _unpause();\\n    }\\n\\n    function joinDao(uint256 _id) public whenNotPaused {\\n        ProfileMember memory info;\\n        require(isMemberDao[msg.sender] == false, \\\"you are a member of dao\\\");\\n        require(\\n            _id <= IAIHomesDao(AIHomesDao).profilesLength(),\\n            \\\"dao id does not exist\\\"\\n        );\\n        require(\\n            IERC20(HOMES).balanceOf(msg.sender) > ticketPrice,\\n            \\\"not enough money to trade\\\"\\n        );\\n        require(\\n            block.timestamp >\\n                profileMemberDao[msg.sender].timeLeaveDao + 30 days,\\n            \\\"not enough time\\\"\\n        );\\n        IERC20(HOMES).transferFrom(\\n            msg.sender,\\n            accountReceiveTicketPrice,\\n            ticketPrice\\n        );\\n\\n        info.addressUser = msg.sender;\\n        info.daoId = _id;\\n        info.amountStaking = 0;\\n        info.timeJoinDao = block.timestamp;\\n        info.status = \\\"active\\\";\\n        isMemberDao[msg.sender] = true;\\n        profileMemberDao[msg.sender] = info;\\n        totalMemberInDao[_id]++;\\n        uint256 newId = totalMemberInDao[_id];\\n        info.id = newId;\\n        getAddressDaoById[_id][newId] = msg.sender;\\n\\n        emit JoinDao(msg.sender, block.timestamp, ticketPrice, _id);\\n    }\\n\\n    function stake(uint256 amount) public whenNotPaused {\\n        require(isMemberDao[msg.sender] == true, \\\"you are not a member of dao\\\");\\n        require(\\n            amount <= IERC20(HOMES).balanceOf(msg.sender),\\n            \\\"you are not enough money\\\"\\n        );\\n\\n        IERC20(HOMES).transferFrom(\\n            msg.sender,\\n            accountReceiveTicketPrice,\\n            amount\\n        );\\n\\n        totalAmountStake[profileMemberDao[msg.sender].daoId] += amount;\\n\\n        ProfileMember storage info = profileMemberDao[msg.sender];\\n\\n        info.amountStaking += amount;\\n\\n        emit StakeDao(\\n            msg.sender,\\n            profileMemberDao[msg.sender].daoId,\\n            block.timestamp,\\n            amount\\n        );\\n    }\\n\\n    function leaveDao() public whenNotPaused {\\n        ProfileMember storage info = profileMemberDao[msg.sender];\\n        require(isMemberDao[msg.sender] == true, \\\"you are not a member of dao\\\");\\n\\n        if (profileMemberDao[msg.sender].amountStaking > 0) {\\n            IERC20(HOMES).transferFrom(\\n                accountReceiveTicketPrice,\\n                msg.sender,\\n                profileMemberDao[msg.sender].amountStaking\\n            );\\n\\n            totalAmountStake[\\n                profileMemberDao[msg.sender].daoId\\n            ] -= profileMemberDao[msg.sender].amountStaking;\\n        }\\n\\n        isMemberDao[msg.sender] = false;\\n        info.status = \\\"inActive\\\";\\n        info.timeLeaveDao = block.timestamp;\\n\\n        emit LeaveDao(msg.sender, block.timestamp, info.timeLeaveDao);\\n    }\\n\\n    function getInfoMemberById(\\n        uint256 _id,\\n        uint256 _index\\n    ) public view returns (ProfileMember memory) {\\n        address add = getAddressDaoById[_id][_index];\\n        ProfileMember memory member = profileMemberDao[add];\\n        return member;\\n    }\\n}\\n\",\"keccak256\":\"0x5e5f882c6b92dd6075b7f5749c9e221f5b3f7495b36f243bc6c85b222cec40b7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405268056bc75e2d6310000060015534801561001d57600080fd5b50604051620014ef380380620014ef83398101604081905261003e916100f7565b6000805460ff1916905561005133610082565b600280546001600160a01b039384166001600160a01b0319918216179091556003805492909316911617905561012a565b600080546001600160a01b03838116610100818102610100600160a81b0319851617855560405193049190911692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a35050565b80516001600160a01b03811681146100f257600080fd5b919050565b6000806040838503121561010a57600080fd5b610113836100db565b9150610121602084016100db565b90509250929050565b6113b5806200013a6000396000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c8063715018a6116100a2578063a44f773c11610071578063a44f773c1461023a578063a694fc3a1461025a578063bedd20501461026d578063ea7b21bb14610280578063f2fde38b1461028857600080fd5b8063715018a6146101ed5780638456cb59146101f55780638da5cb5b146101fd5780638e2965ba1461022757600080fd5b806336b88202116100de57806336b88202146101875780633f4ba83a146101ba5780635c975abb146101c257806363b1dec8146101cd57600080fd5b80631209b1f61461011057806318084fd91461012c578063202531c8146101415780632dc6086414610167575b600080fd5b61011960015481565b6040519081526020015b60405180910390f35b61013f61013a36600461102b565b61029b565b005b61015461014f366004611044565b6106f3565b60405161012397969594939291906110ba565b61011961017536600461102b565b60066020526000908152604090205481565b6101aa610195366004611044565b60056020526000908152604090205460ff1681565b6040519015158152602001610123565b61013f6107c4565b60005460ff166101aa565b6101e06101db366004611106565b6107d6565b6040516101239190611128565b61013f6108fa565b61013f61090c565b60005461010090046001600160a01b03165b6040516001600160a01b039091168152602001610123565b60025461020f906001600160a01b031681565b61011961024836600461102b565b60076020526000908152604090205481565b61013f61026836600461102b565b61091c565b60035461020f906001600160a01b031681565b61013f610b92565b61013f610296366004611044565b610d95565b6102a3610e0e565b6102ab610fe5565b3360009081526005602052604090205460ff16156103105760405162461bcd60e51b815260206004820152601760248201527f796f75206172652061206d656d626572206f662064616f00000000000000000060448201526064015b60405180910390fd5b739fe46736679d2d9a65f0992f2272de9f3c7fa6e06001600160a01b0316639f47ceff6040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610364573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103889190611190565b8211156103cf5760405162461bcd60e51b815260206004820152601560248201527419185bc81a5908191bd95cc81b9bdd08195e1a5cdd605a1b6044820152606401610307565b6001546040516370a0823160e01b815233600482015273e7f1725e7734ce288f8367e1bb143e90bb3f0512906370a0823190602401602060405180830381865afa158015610421573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104459190611190565b116104925760405162461bcd60e51b815260206004820152601960248201527f6e6f7420656e6f756768206d6f6e657920746f207472616465000000000000006044820152606401610307565b336000908152600460205260409020600501546104b29062278d006111bf565b42116104f25760405162461bcd60e51b815260206004820152600f60248201526e6e6f7420656e6f7567682074696d6560881b6044820152606401610307565b6002546001546040516323b872dd60e01b81523360048201526001600160a01b039092166024830152604482015273e7f1725e7734ce288f8367e1bb143e90bb3f0512906323b872dd906064016020604051808303816000875af115801561055e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061058291906111d2565b50336040828101828152602080850186815260006060870181815242608089019081528651808801885260068082526561637469766560d01b8288015260c08b0191825298845260058087528885208054600160ff199091168117909155600497889052989094208a51815594519785019790975594516002840180546001600160a01b0319166001600160a01b0390921691909117905551600383015592519181019190915560a085015191810191909155905183928201906106469082611293565b505050600082815260066020526040812080549161066383611353565b90915550506000828152600660209081526040808320548085528584526008835281842081855283529281902080546001600160a01b031916339081179091556001548251918252429382019390935290810191909152606081018490527f0e2284e046c8d8d19c5481016672115d53f5e23e9766c7e8ce363dbc8c0fde809060800160405180910390a1505050565b60046020819052600091825260409091208054600182015460028301546003840154948401546005850154600686018054959794966001600160a01b0390941695929391926107419061120a565b80601f016020809104026020016040519081016040528092919081815260200182805461076d9061120a565b80156107ba5780601f1061078f576101008083540402835291602001916107ba565b820191906000526020600020905b81548152906001019060200180831161079d57829003601f168201915b5050505050905087565b6107cc610e54565b6107d4610eb4565b565b6107de610fe5565b60008381526008602090815260408083208584528252808320546001600160a01b039081168085526004808552838620845160e0810186528154815260018201549681019690965260028101549093169385019390935260038201546060850152918101546080840152600581015460a08401526006810180549294939260c08401919061086b9061120a565b80601f01602080910402602001604051908101604052809291908181526020018280546108979061120a565b80156108e45780601f106108b9576101008083540402835291602001916108e4565b820191906000526020600020905b8154815290600101906020018083116108c757829003601f168201915b5050509190925250919450505050505b92915050565b610902610e54565b6107d46000610f06565b610914610e54565b6107d4610f5f565b610924610e0e565b3360009081526005602052604090205460ff1615156001146109885760405162461bcd60e51b815260206004820152601b60248201527f796f7520617265206e6f742061206d656d626572206f662064616f00000000006044820152606401610307565b6040516370a0823160e01b815233600482015273e7f1725e7734ce288f8367e1bb143e90bb3f0512906370a0823190602401602060405180830381865afa1580156109d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109fb9190611190565b811115610a4a5760405162461bcd60e51b815260206004820152601860248201527f796f7520617265206e6f7420656e6f756768206d6f6e657900000000000000006044820152606401610307565b6002546040516323b872dd60e01b81523360048201526001600160a01b0390911660248201526044810182905273e7f1725e7734ce288f8367e1bb143e90bb3f0512906323b872dd906064016020604051808303816000875af1158015610ab5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad991906111d2565b50336000908152600460209081526040808320600101548352600790915281208054839290610b099084906111bf565b909155505033600090815260046020526040812060038101805491928492610b329084906111bf565b90915550503360008181526004602090815260409182902060010154825193845290830152428282015260608201849052517fefd878e06a7a9d855e7db7ab8e17f0eec966914c52df8b8fbaef0536037259759181900360800190a15050565b610b9a610e0e565b33600090815260046020908152604080832060059092529091205460ff161515600114610c095760405162461bcd60e51b815260206004820152601b60248201527f796f7520617265206e6f742061206d656d626572206f662064616f00000000006044820152606401610307565b3360009081526004602052604090206003015415610d0357600254336000818152600460208190526040918290206003015491516323b872dd60e01b81526001600160a01b03909416908401526024830191909152604482015273e7f1725e7734ce288f8367e1bb143e90bb3f0512906323b872dd906064016020604051808303816000875af1158015610ca1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cc591906111d2565b503360009081526004602090815260408083206003810154600190910154845260079092528220805491929091610cfd90849061136c565b90915550505b33600090815260056020908152604091829020805460ff1916905581518083019092526008825267696e41637469766560c01b908201526006820190610d499082611293565b504260058201819055604080513381526020810183905280820192909252517fd23d99204cc96426a4c580f3d1a6a95f01a1e35535ce2115643f3c99a629b6229181900360600190a150565b610d9d610e54565b6001600160a01b038116610e025760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610307565b610e0b81610f06565b50565b60005460ff16156107d45760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610307565b6000546001600160a01b036101009091041633146107d45760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610307565b610ebc610f9c565b6000805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b600080546001600160a01b03838116610100818102610100600160a81b0319851617855560405193049190911692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a35050565b610f67610e0e565b6000805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258610ee93390565b60005460ff166107d45760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610307565b6040518060e00160405280600081526020016000815260200160006001600160a01b03168152602001600081526020016000815260200160008152602001606081525090565b60006020828403121561103d57600080fd5b5035919050565b60006020828403121561105657600080fd5b81356001600160a01b038116811461106d57600080fd5b9392505050565b6000815180845260005b8181101561109a5760208185018101518683018201520161107e565b506000602082860101526020601f19601f83011685010191505092915050565b87815286602082015260018060a01b03861660408201528460608201528360808201528260a082015260e060c082015260006110f960e0830184611074565b9998505050505050505050565b6000806040838503121561111957600080fd5b50508035926020909101359150565b60208152815160208201526020820151604082015260018060a01b03604083015116606082015260608201516080820152608082015160a082015260a082015160c0820152600060c083015160e080840152611188610100840182611074565b949350505050565b6000602082840312156111a257600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b808201808211156108f4576108f46111a9565b6000602082840312156111e457600080fd5b8151801515811461106d57600080fd5b634e487b7160e01b600052604160045260246000fd5b600181811c9082168061121e57607f821691505b60208210810361123e57634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561128e57600081815260208120601f850160051c8101602086101561126b5750805b601f850160051c820191505b8181101561128a57828155600101611277565b5050505b505050565b815167ffffffffffffffff8111156112ad576112ad6111f4565b6112c1816112bb845461120a565b84611244565b602080601f8311600181146112f657600084156112de5750858301515b600019600386901b1c1916600185901b17855561128a565b600085815260208120601f198616915b8281101561132557888601518255948401946001909101908401611306565b50858210156113435787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600060018201611365576113656111a9565b5060010190565b818103818111156108f4576108f46111a956fea2646970667358221220f6f1a0d0af3f919535e1b5b6921ff54e7a1f79107aa6a128a4056811246fd4d664736f6c63430008120033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061010b5760003560e01c8063715018a6116100a2578063a44f773c11610071578063a44f773c1461023a578063a694fc3a1461025a578063bedd20501461026d578063ea7b21bb14610280578063f2fde38b1461028857600080fd5b8063715018a6146101ed5780638456cb59146101f55780638da5cb5b146101fd5780638e2965ba1461022757600080fd5b806336b88202116100de57806336b88202146101875780633f4ba83a146101ba5780635c975abb146101c257806363b1dec8146101cd57600080fd5b80631209b1f61461011057806318084fd91461012c578063202531c8146101415780632dc6086414610167575b600080fd5b61011960015481565b6040519081526020015b60405180910390f35b61013f61013a36600461102b565b61029b565b005b61015461014f366004611044565b6106f3565b60405161012397969594939291906110ba565b61011961017536600461102b565b60066020526000908152604090205481565b6101aa610195366004611044565b60056020526000908152604090205460ff1681565b6040519015158152602001610123565b61013f6107c4565b60005460ff166101aa565b6101e06101db366004611106565b6107d6565b6040516101239190611128565b61013f6108fa565b61013f61090c565b60005461010090046001600160a01b03165b6040516001600160a01b039091168152602001610123565b60025461020f906001600160a01b031681565b61011961024836600461102b565b60076020526000908152604090205481565b61013f61026836600461102b565b61091c565b60035461020f906001600160a01b031681565b61013f610b92565b61013f610296366004611044565b610d95565b6102a3610e0e565b6102ab610fe5565b3360009081526005602052604090205460ff16156103105760405162461bcd60e51b815260206004820152601760248201527f796f75206172652061206d656d626572206f662064616f00000000000000000060448201526064015b60405180910390fd5b739fe46736679d2d9a65f0992f2272de9f3c7fa6e06001600160a01b0316639f47ceff6040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610364573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103889190611190565b8211156103cf5760405162461bcd60e51b815260206004820152601560248201527419185bc81a5908191bd95cc81b9bdd08195e1a5cdd605a1b6044820152606401610307565b6001546040516370a0823160e01b815233600482015273e7f1725e7734ce288f8367e1bb143e90bb3f0512906370a0823190602401602060405180830381865afa158015610421573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104459190611190565b116104925760405162461bcd60e51b815260206004820152601960248201527f6e6f7420656e6f756768206d6f6e657920746f207472616465000000000000006044820152606401610307565b336000908152600460205260409020600501546104b29062278d006111bf565b42116104f25760405162461bcd60e51b815260206004820152600f60248201526e6e6f7420656e6f7567682074696d6560881b6044820152606401610307565b6002546001546040516323b872dd60e01b81523360048201526001600160a01b039092166024830152604482015273e7f1725e7734ce288f8367e1bb143e90bb3f0512906323b872dd906064016020604051808303816000875af115801561055e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061058291906111d2565b50336040828101828152602080850186815260006060870181815242608089019081528651808801885260068082526561637469766560d01b8288015260c08b0191825298845260058087528885208054600160ff199091168117909155600497889052989094208a51815594519785019790975594516002840180546001600160a01b0319166001600160a01b0390921691909117905551600383015592519181019190915560a085015191810191909155905183928201906106469082611293565b505050600082815260066020526040812080549161066383611353565b90915550506000828152600660209081526040808320548085528584526008835281842081855283529281902080546001600160a01b031916339081179091556001548251918252429382019390935290810191909152606081018490527f0e2284e046c8d8d19c5481016672115d53f5e23e9766c7e8ce363dbc8c0fde809060800160405180910390a1505050565b60046020819052600091825260409091208054600182015460028301546003840154948401546005850154600686018054959794966001600160a01b0390941695929391926107419061120a565b80601f016020809104026020016040519081016040528092919081815260200182805461076d9061120a565b80156107ba5780601f1061078f576101008083540402835291602001916107ba565b820191906000526020600020905b81548152906001019060200180831161079d57829003601f168201915b5050505050905087565b6107cc610e54565b6107d4610eb4565b565b6107de610fe5565b60008381526008602090815260408083208584528252808320546001600160a01b039081168085526004808552838620845160e0810186528154815260018201549681019690965260028101549093169385019390935260038201546060850152918101546080840152600581015460a08401526006810180549294939260c08401919061086b9061120a565b80601f01602080910402602001604051908101604052809291908181526020018280546108979061120a565b80156108e45780601f106108b9576101008083540402835291602001916108e4565b820191906000526020600020905b8154815290600101906020018083116108c757829003601f168201915b5050509190925250919450505050505b92915050565b610902610e54565b6107d46000610f06565b610914610e54565b6107d4610f5f565b610924610e0e565b3360009081526005602052604090205460ff1615156001146109885760405162461bcd60e51b815260206004820152601b60248201527f796f7520617265206e6f742061206d656d626572206f662064616f00000000006044820152606401610307565b6040516370a0823160e01b815233600482015273e7f1725e7734ce288f8367e1bb143e90bb3f0512906370a0823190602401602060405180830381865afa1580156109d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109fb9190611190565b811115610a4a5760405162461bcd60e51b815260206004820152601860248201527f796f7520617265206e6f7420656e6f756768206d6f6e657900000000000000006044820152606401610307565b6002546040516323b872dd60e01b81523360048201526001600160a01b0390911660248201526044810182905273e7f1725e7734ce288f8367e1bb143e90bb3f0512906323b872dd906064016020604051808303816000875af1158015610ab5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad991906111d2565b50336000908152600460209081526040808320600101548352600790915281208054839290610b099084906111bf565b909155505033600090815260046020526040812060038101805491928492610b329084906111bf565b90915550503360008181526004602090815260409182902060010154825193845290830152428282015260608201849052517fefd878e06a7a9d855e7db7ab8e17f0eec966914c52df8b8fbaef0536037259759181900360800190a15050565b610b9a610e0e565b33600090815260046020908152604080832060059092529091205460ff161515600114610c095760405162461bcd60e51b815260206004820152601b60248201527f796f7520617265206e6f742061206d656d626572206f662064616f00000000006044820152606401610307565b3360009081526004602052604090206003015415610d0357600254336000818152600460208190526040918290206003015491516323b872dd60e01b81526001600160a01b03909416908401526024830191909152604482015273e7f1725e7734ce288f8367e1bb143e90bb3f0512906323b872dd906064016020604051808303816000875af1158015610ca1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cc591906111d2565b503360009081526004602090815260408083206003810154600190910154845260079092528220805491929091610cfd90849061136c565b90915550505b33600090815260056020908152604091829020805460ff1916905581518083019092526008825267696e41637469766560c01b908201526006820190610d499082611293565b504260058201819055604080513381526020810183905280820192909252517fd23d99204cc96426a4c580f3d1a6a95f01a1e35535ce2115643f3c99a629b6229181900360600190a150565b610d9d610e54565b6001600160a01b038116610e025760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610307565b610e0b81610f06565b50565b60005460ff16156107d45760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610307565b6000546001600160a01b036101009091041633146107d45760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610307565b610ebc610f9c565b6000805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b600080546001600160a01b03838116610100818102610100600160a81b0319851617855560405193049190911692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a35050565b610f67610e0e565b6000805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258610ee93390565b60005460ff166107d45760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610307565b6040518060e00160405280600081526020016000815260200160006001600160a01b03168152602001600081526020016000815260200160008152602001606081525090565b60006020828403121561103d57600080fd5b5035919050565b60006020828403121561105657600080fd5b81356001600160a01b038116811461106d57600080fd5b9392505050565b6000815180845260005b8181101561109a5760208185018101518683018201520161107e565b506000602082860101526020601f19601f83011685010191505092915050565b87815286602082015260018060a01b03861660408201528460608201528360808201528260a082015260e060c082015260006110f960e0830184611074565b9998505050505050505050565b6000806040838503121561111957600080fd5b50508035926020909101359150565b60208152815160208201526020820151604082015260018060a01b03604083015116606082015260608201516080820152608082015160a082015260a082015160c0820152600060c083015160e080840152611188610100840182611074565b949350505050565b6000602082840312156111a257600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b808201808211156108f4576108f46111a9565b6000602082840312156111e457600080fd5b8151801515811461106d57600080fd5b634e487b7160e01b600052604160045260246000fd5b600181811c9082168061121e57607f821691505b60208210810361123e57634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561128e57600081815260208120601f850160051c8101602086101561126b5750805b601f850160051c820191505b8181101561128a57828155600101611277565b5050505b505050565b815167ffffffffffffffff8111156112ad576112ad6111f4565b6112c1816112bb845461120a565b84611244565b602080601f8311600181146112f657600084156112de5750858301515b600019600386901b1c1916600185901b17855561128a565b600085815260208120601f198616915b8281101561132557888601518255948401946001909101908401611306565b50858210156113435787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600060018201611365576113656111a9565b5060010190565b818103818111156108f4576108f46111a956fea2646970667358221220f6f1a0d0af3f919535e1b5b6921ff54e7a1f79107aa6a128a4056811246fd4d664736f6c63430008120033",
  "devdoc": {
    "events": {
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      }
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 130,
        "contract": "contracts/AihomeDaoStaking.sol:AihomeDaoStaking",
        "label": "_paused",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 7,
        "contract": "contracts/AihomeDaoStaking.sol:AihomeDaoStaking",
        "label": "_owner",
        "offset": 1,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 338,
        "contract": "contracts/AihomeDaoStaking.sol:AihomeDaoStaking",
        "label": "ticketPrice",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 346,
        "contract": "contracts/AihomeDaoStaking.sol:AihomeDaoStaking",
        "label": "accountReceiveTicketPrice",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 348,
        "contract": "contracts/AihomeDaoStaking.sol:AihomeDaoStaking",
        "label": "accountReceiveStaking",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 368,
        "contract": "contracts/AihomeDaoStaking.sol:AihomeDaoStaking",
        "label": "profileMemberDao",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_struct(ProfileMember)363_storage)"
      },
      {
        "astId": 372,
        "contract": "contracts/AihomeDaoStaking.sol:AihomeDaoStaking",
        "label": "isMemberDao",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 376,
        "contract": "contracts/AihomeDaoStaking.sol:AihomeDaoStaking",
        "label": "totalMemberInDao",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 380,
        "contract": "contracts/AihomeDaoStaking.sol:AihomeDaoStaking",
        "label": "totalAmountStake",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 386,
        "contract": "contracts/AihomeDaoStaking.sol:AihomeDaoStaking",
        "label": "getAddressDaoById",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_address))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(ProfileMember)363_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct AihomeDaoStaking.ProfileMember)",
        "numberOfBytes": "32",
        "value": "t_struct(ProfileMember)363_storage"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_address))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_address)"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(ProfileMember)363_storage": {
        "encoding": "inplace",
        "label": "struct AihomeDaoStaking.ProfileMember",
        "members": [
          {
            "astId": 350,
            "contract": "contracts/AihomeDaoStaking.sol:AihomeDaoStaking",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 352,
            "contract": "contracts/AihomeDaoStaking.sol:AihomeDaoStaking",
            "label": "daoId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 354,
            "contract": "contracts/AihomeDaoStaking.sol:AihomeDaoStaking",
            "label": "addressUser",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 356,
            "contract": "contracts/AihomeDaoStaking.sol:AihomeDaoStaking",
            "label": "amountStaking",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 358,
            "contract": "contracts/AihomeDaoStaking.sol:AihomeDaoStaking",
            "label": "timeJoinDao",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 360,
            "contract": "contracts/AihomeDaoStaking.sol:AihomeDaoStaking",
            "label": "timeLeaveDao",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 362,
            "contract": "contracts/AihomeDaoStaking.sol:AihomeDaoStaking",
            "label": "status",
            "offset": 0,
            "slot": "6",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}