{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/AihomeDaoStaking.sol": {
      "content": "// SPDX-License-Identifier: MIT\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\npragma solidity ^0.8.9;\n\ninterface IAIHomesDao {\n    function profilesLength() external returns (uint256 length);\n    function isOwnDao(address by) external returns (bool);\n    function profilesById(\n        uint256 _id\n    )\n        external\n        returns (uint256 id, string memory name, address owner, uint256 option);\n}\n\ncontract AihomeDaoStaking is Pausable, Ownable {\n    //NOTE: testnet\n    // address constant HOMES = 0x8402c360a9C1C9214D870c00835450899bC4F318;\n    // address constant AIHomesDao = 0xf355A894C449D81570E5C4B7da43Ca266987808c;\n\n    //NOTE: local\n    address constant HOMES = 0x5FbDB2315678afecb367f032d93F642f64180aa3;\n    address constant AIHomesDao = 0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9;\n\n    address public accountReceiveTicketPrice;\n    address public accountReceiveStaking;\n\n    struct ProfileDao {\n        uint256 totalMember;\n        uint256 totalStake;\n    }\n\n    struct ProfileMember {\n        uint256 id;\n        string name;\n        uint256 daoId;\n        address addressUser;\n        uint256 amountStaking;\n        uint256 timeJoinDao;\n        uint256 timeLeaveDao;\n        string status;\n    }\n\n    mapping(address => ProfileMember) public profileMemberDao;\n    mapping(address => bool) public isMemberDao;\n    mapping(uint256 => ProfileDao) public profileDaoById;\n    mapping(uint256 => mapping(uint256 => address)) private getAddressDaoById;\n    mapping(string => bool) public isExistName;\n\n    event JoinDao(address by,string name, uint256 timestamp, uint256 amount, uint256 idDao);\n    event LeaveDao(address by, uint256 timeJoinDao, uint256 idDao);\n\n    constructor(\n        address _accountReceiveTicketPrice,\n        address _accountReceiveStaking\n    ) {\n        accountReceiveTicketPrice = _accountReceiveTicketPrice;\n        accountReceiveStaking = _accountReceiveStaking;\n    }\n\n    function pause() public onlyOwner {\n        _pause();\n    }\n\n    function unpause() public onlyOwner {\n        _unpause();\n    }\n\n    function joinDao(uint256 _id, string memory _name) public whenNotPaused {\n        ProfileMember memory info;\n        require(isMemberDao[msg.sender] == false, \"you are a member of dao\");\n        require(IAIHomesDao(AIHomesDao).isOwnDao(msg.sender)==false, 'you are owner dao');\n        require(isExistName[_name] == false, \"Name already exist\");\n\n        require(\n            _id <= IAIHomesDao(AIHomesDao).profilesLength(),\n            \"dao id does not exist\"\n        );\n        (, , , uint256 _option) = IAIHomesDao(AIHomesDao).profilesById(_id);\n\n        uint256 priceStake;\n\n        if (_option == 1) {\n            priceStake = 40 ether;\n        } else if (_option == 2) {\n            priceStake = 60 ether;\n        } else {\n            priceStake = 100 ether;\n        }\n        require(\n            IERC20(HOMES).balanceOf(msg.sender) >= priceStake,\n            \"not enough money to trade\"\n        );\n        require(\n            block.timestamp >\n                profileMemberDao[msg.sender].timeLeaveDao + 30 days,\n            \"not enough time\"\n        );\n\n        IERC20(HOMES).transferFrom(\n            msg.sender,\n            accountReceiveTicketPrice,\n            priceStake\n        );\n\n        profileDaoById[_id].totalStake += priceStake;\n\n        info.addressUser = msg.sender;\n        info.daoId = _id;\n        info.name = _name;\n        info.amountStaking = priceStake;\n        info.timeJoinDao = block.timestamp;\n        info.status = \"active\";\n        isMemberDao[msg.sender] = true;\n        profileDaoById[_id].totalMember++;\n        info.id = profileDaoById[_id].totalMember;\n\n        profileMemberDao[msg.sender] = info;\n        getAddressDaoById[_id][info.id] = msg.sender;\n\n        isExistName[_name] = true;\n        emit JoinDao(msg.sender, _name, block.timestamp, priceStake, _id);\n    }\n\n    function leaveDao() public whenNotPaused {\n        ProfileMember storage info = profileMemberDao[msg.sender];\n        require(isMemberDao[msg.sender] == true, \"you are not a member of dao\");\n\n        IERC20(HOMES).transferFrom(\n            accountReceiveTicketPrice,\n            msg.sender,\n            profileMemberDao[msg.sender].amountStaking\n        );\n\n        profileDaoById[profileMemberDao[msg.sender].daoId]\n            .totalStake -= profileMemberDao[msg.sender].amountStaking;\n\n        isMemberDao[msg.sender] = false;\n        info.status = \"inActive\";\n        info.timeLeaveDao = block.timestamp;\n\n        isExistName[profileMemberDao[msg.sender].name] = false;\n        emit LeaveDao(msg.sender, block.timestamp, info.timeLeaveDao);\n    }\n\n    function getInfoMemberById(\n        uint256 _id,\n        uint256 _index\n    ) public view returns (ProfileMember memory) {\n        address add = getAddressDaoById[_id][_index];\n        ProfileMember memory member = profileMemberDao[add];\n        return member;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}